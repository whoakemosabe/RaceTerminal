import { commands } from '@/lib/commands';
import { CommandFunction } from '../index';
import { commandAliases } from '@/components/terminal/command-processor';
import { commandInfo } from '@/lib/data/command-info';

// Helper functions
function formatCommand(cmd: typeof commands[0]): string {
  const [baseCmd, ...params] = cmd.command.split(' ');
  const aliases = baseCmd.match(/\((.*?)\)/)?.[1];
  const cleanCmd = baseCmd.replace(/\s*\(.*?\)/, '');
  const shortcut = Object.entries(commandAliases)
    .find(([alias, target]) => target === cleanCmd)?.[0];
  
  return [
    `${cleanCmd}${params.length ? ' ' + params.join(' ') : ''}`,
    aliases || shortcut ? `Aliases: ${[aliases, shortcut].filter(Boolean).join(', ')}` : '',
    `Description: ${cmd.description}`,
    `Source: ${cmd.source}`,
    ''
  ].filter(Boolean).join('\n');
}

function getCommandExamples(cmd: string): string {
  return commandExamples[cmd]?.join('\n') || '';
}

function getCommandNotes(cmd: string): string {
  return commandNotes[cmd]?.join('\n') || '';
}

function getRelatedCommands(cmd: string): string {
  return relatedCommands[cmd]?.join('\n') || '';
}

interface HelpCommands {
  [key: string]: CommandFunction;
}

// Help categories for organizing commands
const helpCategories = {
  'RACE INFORMATION': {
    description: 'Commands for accessing race data, standings, and schedules',
    commands: ['standings', 'teams', 'schedule', 'next', 'last', 'track', 'car']
  },
  'LIVE DATA': {
    description: 'Real-time data during active F1 sessions',
    commands: ['live', 'telemetry', 'status', 'weather', 'tires']
  },
  'HISTORICAL DATA': {
    description: 'Historical race results and statistics',
    commands: ['race', 'qualifying', 'sprint', 'pitstops', 'fastest', 'laps']
  },
  'ANALYSIS': {
    description: 'Advanced race and performance analysis tools',
    commands: ['pace', 'gap', 'sector', 'overtake', 'plot', 'compare']
  },
  'EFFECTS': {
    description: 'Visual effects and terminal customization',
    commands: ['retro', 'matrix', 'crt', 'glitch', 'scanlines', 'calc']
  },
  'SYSTEM': {
    description: 'System commands and terminal management',
    commands: ['user', 'clear', 'help', 'theme', 'sys', 'hack', 'fontsize', 'stats', 'decrypt']
  }
};

// Detailed command examples
const commandExamples: Record<string, string[]> = {
  '/driver': [
    '/driver hamilton - View Lewis Hamilton\'s profile',
    '/driver VER - View Max Verstappen using driver code',
    '/driver 1 - View driver using race number',
    '/driver schumi - View Michael Schumacher\'s profile'
  ],
  '/theme': [
    '/theme ferrari - Apply Ferrari team colors',
    '/theme dracula - Use Dracula editor theme',
    '/theme calc amber - Enable calculator mode with amber display',
    '/theme default - Reset to default colors'
  ],
  '/pace': [
    '/pace 2023 1 - Analyze race pace from 2023 Bahrain GP',
    '/pace 2023 5 - Analyze race pace from 2023 Miami GP',
    '/pace 2024 1 - Analyze race pace from 2024 Bahrain GP'
  ],
  '/gap': [
    '/gap 2023 1 - Analyze gaps from 2023 Bahrain GP',
    '/gap 2023 5 - Analyze gaps from 2023 Miami GP',
    '/gap 2024 1 - Analyze gaps from 2024 Bahrain GP'
  ],
  '/sector': [
    '/sector 2023 1 - Analyze sector times from 2023 Bahrain GP',
    '/sector 2023 5 - Analyze sector times from 2023 Miami GP',
    '/sector 2024 1 - Analyze sector times from 2024 Bahrain GP'
  ],
  '/overtake': [
    '/overtake 2023 1 - Analyze overtakes from 2023 Bahrain GP',
    '/overtake 2023 5 - Analyze overtakes from 2023 Miami GP',
    '/overtake 2024 1 - Analyze overtakes from 2024 Bahrain GP'
  ],
  '/plot': [
    '/plot 2023 1 verstappen - Plot Verstappen\'s lap times from 2023 Bahrain GP',
    '/plot 2023 5 leclerc - Plot Leclerc\'s lap times from 2023 Miami GP',
    '/plot 2024 1 hamilton - Plot Hamilton\'s lap times from 2024 Bahrain GP'
  ],
  '/compare': [
    '/compare driver verstappen hamilton - Compare Verstappen and Hamilton\'s careers',
    '/compare team redbull mercedes - Compare Red Bull and Mercedes statistics',
    '/md verstappen hamilton - Quick driver comparison shortcut',
    '/mt redbull mercedes - Quick team comparison shortcut'
  ],
  '/theme': [
    '/theme ferrari - Apply Ferrari team colors',
    '/theme dracula - Use Dracula editor theme',
    '/theme calc amber - Enable calculator mode with amber display',
    '/theme default - Reset to default colors'
  ],
  '/retro': [
    '/retro - Toggle retro text effect',
    '/retro all - Enable all retro effects',
    '/retro reset - Disable all effects'
  ]
};

// Command usage notes
const commandNotes: Record<string, string[]> = {
  '/driver': [
    '‚Ä¢ Search by full name (e.g., hamilton)',
    '‚Ä¢ Search by driver code (e.g., HAM)',
    '‚Ä¢ Search by race number (e.g., 44)',
    '‚Ä¢ Search by nickname (e.g., schumi)',
    '‚Ä¢ Includes current and historical drivers',
    '‚Ä¢ Shows nationality and career info',
    '‚Ä¢ Case-insensitive search'
  ],
  '/theme': [
    '‚Ä¢ Supports F1 team themes (e.g., ferrari, mercedes)',
    '‚Ä¢ Editor themes (e.g., dracula, monokai, nord)',
    '‚Ä¢ Calculator themes (use /theme calc <scheme>)',
    '‚Ä¢ Themes persist between sessions',
    '‚Ä¢ Use /theme default to reset colors'
  ],
  '/pace': [
    '‚Ä¢ Analyzes race pace and consistency',
    '‚Ä¢ Shows stint performance',
    '‚Ä¢ Calculates tire degradation',
    '‚Ä¢ Provides performance ratings',
    '‚Ä¢ Available for all races since 2018'
  ],
  '/gap': [
    '‚Ä¢ Shows intervals between drivers',
    '‚Ä¢ Tracks gap to leader',
    '‚Ä¢ Identifies key battles',
    '‚Ä¢ Analyzes defensive performance',
    '‚Ä¢ Includes DRS detection'
  ],
  '/sector': [
    '‚Ä¢ Compares sector times',
    '‚Ä¢ Shows theoretical best lap',
    '‚Ä¢ Highlights purple/green sectors',
    '‚Ä¢ Tracks session improvements',
    '‚Ä¢ Available for qualifying sessions'
  ],
  '/overtake': [
    '‚Ä¢ Tracks position changes',
    '‚Ä¢ Identifies DRS overtakes',
    '‚Ä¢ Analyzes defensive performance',
    '‚Ä¢ Shows key overtaking moments',
    '‚Ä¢ Includes battle analysis'
  ],
  '/plot': [
    '‚Ä¢ Generates ASCII charts',
    '‚Ä¢ Shows lap time trends',
    '‚Ä¢ Marks fastest laps',
    '‚Ä¢ Includes performance deltas',
    '‚Ä¢ Visual lap time comparison'
  ],
  '/compare': [
    '‚Ä¢ Compare career statistics',
    '‚Ä¢ Shows head-to-head records',
    '‚Ä¢ Includes championship data',
    '‚Ä¢ Performance metrics',
    '‚Ä¢ Historical achievements'
  ]
};

// Related commands for each command
const relatedCommands: Record<string, string[]> = {
  '/driver': [
    '‚Ä¢ /compare - Compare driver statistics',
    '‚Ä¢ /standings - Championship standings',
    '‚Ä¢ /list drivers - List all drivers',
    '‚Ä¢ /telemetry - Live car data'
  ],
  '/theme': [
    '‚Ä¢ /retro - Retro text effects',
    '‚Ä¢ /matrix - Matrix effects',
    '‚Ä¢ /crt - CRT monitor effects',
    '‚Ä¢ /calc - Calculator mode'
  ],
  '/pace': [
    '‚Ä¢ /gap - Race gap analysis',
    '‚Ä¢ /sector - Sector time analysis',
    '‚Ä¢ /plot - Lap time plots',
    '‚Ä¢ /overtake - Overtaking analysis'
  ],
  '/gap': [
    '‚Ä¢ /pace - Race pace analysis',
    '‚Ä¢ /overtake - Overtaking analysis',
    '‚Ä¢ /plot - Lap time plots',
    '‚Ä¢ /sector - Sector analysis'
  ],
  '/sector': [
    '‚Ä¢ /qualifying - Full qualifying results',
    '‚Ä¢ /fastest - Fastest lap records',
    '‚Ä¢ /plot - Lap time plots',
    '‚Ä¢ /pace - Race pace analysis'
  ],
  '/overtake': [
    '‚Ä¢ /gap - Race gap analysis',
    '‚Ä¢ /pace - Race pace analysis',
    '‚Ä¢ /plot - Lap time plots',
    '‚Ä¢ /sector - Sector analysis'
  ],
  '/plot': [
    '‚Ä¢ /pace - Race pace analysis',
    '‚Ä¢ /gap - Race gap analysis',
    '‚Ä¢ /sector - Sector time analysis',
    '‚Ä¢ /overtake - Overtaking analysis'
  ],
  '/compare': [
    '‚Ä¢ /driver - Driver information',
    '‚Ä¢ /team - Team information',
    '‚Ä¢ /standings - Championship standings',
    '‚Ä¢ /stats - Usage statistics'
  ]
};

export const helpCommands: HelpCommands = {
  '/help': async (args: string[]) => {
    // If a specific command is provided
    if (args[0]) {
      const searchTerm = args[0].toLowerCase();
      const commandKey = `/${searchTerm.replace('/', '')}`;
      
      // Check for category help first
      const category = Object.entries(helpCategories).find(([name]) => 
        name.toLowerCase().includes(searchTerm)
      );

      if (category) {
        const [categoryName, categoryInfo] = category;
        const categoryCommands = commands.filter(cmd => 
          categoryInfo.commands.some(term => 
            cmd.command.toLowerCase().includes(term)
          )
        );

        return [
          `üìö ${categoryName} COMMANDS`,
          '‚ïê'.repeat(60),
          categoryInfo.description,
          '',
          ...categoryCommands.map(formatCommand)
        ].join('\n');
      }

      // Check for specific command help
      if (commandInfo[commandKey]) {
        const info = commandInfo[commandKey];
        const command = commands.find(cmd => 
          cmd.command.split(' ')[0].replace(/\s*\(.*?\)/, '').toLowerCase() === commandKey
        );

        if (command) {
          const [baseCmd, ...params] = command.command.split(' ');
          const shortcut = Object.entries(commandAliases)
            .find(([alias, target]) => target === baseCmd)?.[0];
          const aliases = baseCmd.match(/\((.*?)\)/)?.[1];
          const aliasText = aliases || shortcut ? ` (${[aliases, shortcut].filter(Boolean).join(', ')})` : '';

          return [
            `üìö ${baseCmd.toUpperCase()} COMMAND REFERENCE`,
            '‚ïê'.repeat(60),
            `\nDescription: ${command.description}`,
            `Description: ${info.description}`,
            `Category: ${info.category}`,
            `Source: ${command.source}`,
            '',
            'Usage:',
            `${baseCmd}${params.length ? ` ${params.join(' ')}` : ''}${aliasText}`,
            '',
            'Examples:',
            getCommandExamples(commandKey),
            '',
            'Notes:',
            getCommandNotes(commandKey),
            '',
            'Related Commands:',
            getRelatedCommands(commandKey)
          ].filter(Boolean).join('\n');
        }
      }

      // Check for category help
      const category = quickReferenceCategories.find(cat => 
        cat.title.toLowerCase().includes(searchTerm.replace('/', ''))
      );

      if (category) {
        const categoryCommands = commands.filter(cmd =>
          category.filter.some(term => cmd.command.toLowerCase().includes(term))
        );

        return [
          `üìö ${category.title} COMMANDS`,
          '‚ïê'.repeat(60),
          '',
          ...categoryCommands.map(formatCommand)
        ].join('\n');
      }

      return [
        `‚ùå Help topic "${args[0]}" not found. Try one of these:`,
        '',
        'Categories:',
        ...quickReferenceCategories.map(cat => `‚Ä¢ ${cat.title}`),
        '',
        'Popular Commands:',
        '‚Ä¢ telemetry - Car telemetry data',
        '‚Ä¢ live - Live timing information',
        '‚Ä¢ weather - Track conditions',
        '‚Ä¢ compare - Compare drivers/teams',
        '‚Ä¢ effects - Visual effects',
        '‚Ä¢ list - Available data'
      ].join('\n');
    }

    const header = [
      'üìö RACETERMINAL PRO COMMAND REFERENCE',
      '‚ïê'.repeat(60),
      '\nWelcome to RaceTerminal Pro! This terminal provides comprehensive Formula 1 data access and analysis.',
      'Below is a complete list of available commands organized by category.',
      ''
    ];

    const content = Object.entries(commandInfo).map(([cmd, info]) => {
      const command = commands.find(c => c.command.split(' ')[0] === cmd);
      if (!command) return '';
      
      const shortcut = Object.entries(commandAliases)
        .find(([alias, target]) => target === cmd)?.[0];
      const aliases = command.command.match(/\((.*?)\)/)?.[1];
      const aliasText = aliases || shortcut ? ` (${[aliases, shortcut].filter(Boolean).join(', ')})` : '';

      return `${cmd}${aliasText}\n  ${info.description}\n`;
    }).filter(Boolean);

    return [
      ...header,
      'üèÅ RACE INFORMATION',
      '‚ïê'.repeat(60),
      content.filter(cmd => cmd.includes('standings') || cmd.includes('schedule') || cmd.includes('track')).join('\n'),
      '\n',
      'üìä LIVE DATA',
      '‚ïê'.repeat(60),
      content.filter(cmd => cmd.includes('live') || cmd.includes('telemetry') || cmd.includes('weather')).join('\n'),
      '',
      'üìà ANALYSIS',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'ANALYSIS';
      }).join('\n'),
      '',
      '‚ú® EFFECTS',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'EFFECTS';
      }).join('\n'),
      '',
      '‚öôÔ∏è SYSTEM',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'SYSTEM';
      }).join('\n'),
      '',
      'Tips:',
      '‚Ä¢ Use /list <type> to see available data (drivers, teams, tracks, cars)',
      '‚Ä¢ Use Tab for command completion',
      '‚Ä¢ Commands are case-insensitive',
      '‚Ä¢ Most commands have shortcuts (shown in parentheses)',
      '‚Ä¢ Press Alt+Enter to toggle fullscreen mode',
      '‚Ä¢ Press Ctrl+L to clear the terminal',
      '',
      'For detailed help on any command, type: /help <command>',
      'For example: /help pace'
    ].join('\n');
  }
};

export const helpCommands: HelpCommands = {
  '/help': async (args: string[]) => {
    // If a specific command is provided
    if (args[0]) {
      const searchTerm = args[0].toLowerCase();
      const commandKey = `/${searchTerm.replace('/', '')}`;
      
      // Check for category help first
      const category = Object.entries(helpCategories).find(([name]) => 
        name.toLowerCase().includes(searchTerm)
      );

      if (category) {
        const [categoryName, categoryInfo] = category;
        const categoryCommands = commands.filter(cmd => 
          categoryInfo.commands.some(term => 
            cmd.command.toLowerCase().includes(term)
          )
        );

        return [
          `üìö ${categoryName} COMMANDS`,
          '‚ïê'.repeat(60),
          categoryInfo.description,
          '',
          ...categoryCommands.map(formatCommand)
        ].join('\n');
      }

      // Check for specific command help
      if (commandInfo[commandKey]) {
        const info = commandInfo[commandKey];
        const command = commands.find(cmd => 
          cmd.command.split(' ')[0].replace(/\s*\(.*?\)/, '').toLowerCase() === commandKey
        );

        if (command) {
          const [baseCmd, ...params] = command.command.split(' ');
          const shortcut = Object.entries(commandAliases)
            .find(([alias, target]) => target === baseCmd)?.[0];
          const aliases = baseCmd.match(/\((.*?)\)/)?.[1];
          const aliasText = aliases || shortcut ? ` (${[aliases, shortcut].filter(Boolean).join(', ')})` : '';

          return [
            `üìö ${baseCmd.toUpperCase()} COMMAND REFERENCE`,
            '‚ïê'.repeat(60),
            `\nDescription: ${command.description}`,
            `Description: ${info.description}`,
            `Category: ${info.category}`,
            `Source: ${command.source}`,
            '',
            'Usage:',
            `${baseCmd}${params.length ? ` ${params.join(' ')}` : ''}${aliasText}`,
            '',
            'Examples:',
            getCommandExamples(commandKey),
            '',
            'Notes:',
            getCommandNotes(commandKey),
            '',
            'Related Commands:',
            getRelatedCommands(commandKey)
          ].filter(Boolean).join('\n');
        }
      }

      // Check for category help
      const category = quickReferenceCategories.find(cat => 
        cat.title.toLowerCase().includes(searchTerm.replace('/', ''))
      );

      if (category) {
        const categoryCommands = commands.filter(cmd =>
          category.filter.some(term => cmd.command.toLowerCase().includes(term))
        );

        return [
          `üìö ${category.title} COMMANDS`,
          '‚ïê'.repeat(60),
          '',
          ...categoryCommands.map(formatCommand)
        ].join('\n');
      }

      return [
        `‚ùå Help topic "${args[0]}" not found. Try one of these:`,
        '',
        'Categories:',
        ...quickReferenceCategories.map(cat => `‚Ä¢ ${cat.title}`),
        '',
        'Popular Commands:',
        '‚Ä¢ telemetry - Car telemetry data',
        '‚Ä¢ live - Live timing information',
        '‚Ä¢ weather - Track conditions',
        '‚Ä¢ compare - Compare drivers/teams',
        '‚Ä¢ effects - Visual effects',
        '‚Ä¢ list - Available data'
      ].join('\n');
    }

    const header = [
      'üìö RACETERMINAL PRO COMMAND REFERENCE',
      '‚ïê'.repeat(60),
      '\nWelcome to RaceTerminal Pro! This terminal provides comprehensive Formula 1 data access and analysis.',
      'Below is a complete list of available commands organized by category.',
      ''
    ];

    const content = Object.entries(commandInfo).map(([cmd, info]) => {
      const command = commands.find(c => c.command.split(' ')[0] === cmd);
      if (!command) return '';
      
      const shortcut = Object.entries(commandAliases)
        .find(([alias, target]) => target === cmd)?.[0];
      const aliases = command.command.match(/\((.*?)\)/)?.[1];
      const aliasText = aliases || shortcut ? ` (${[aliases, shortcut].filter(Boolean).join(', ')})` : '';

      return `${cmd}${aliasText}\n  ${info.description}\n`;
    }).filter(Boolean);

    return [
      ...header,
      'üèÅ RACE INFORMATION',
      '‚ïê'.repeat(60),
      content.filter(cmd => cmd.includes('standings') || cmd.includes('schedule') || cmd.includes('track')).join('\n'),
      '\n',
      'üìä LIVE DATA',
      '‚ïê'.repeat(60),
      content.filter(cmd => cmd.includes('live') || cmd.includes('telemetry') || cmd.includes('weather')).join('\n'),
      '',
      'üìà ANALYSIS',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'ANALYSIS';
      }).join('\n'),
      '',
      '‚ú® EFFECTS',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'EFFECTS';
      }).join('\n'),
      '',
      '‚öôÔ∏è SYSTEM',
      '‚ïê'.repeat(60),
      content.filter(cmd => {
        const info = commandInfo[cmd.split('\n')[0].split(' ')[0].trim()];
        return info && info.category === 'SYSTEM';
      }).join('\n'),
      '',
      'Tips:',
      '‚Ä¢ Use /list <type> to see available data (drivers, teams, tracks, cars)',
      '‚Ä¢ Use Tab for command completion',
      '‚Ä¢ Commands are case-insensitive',
      '‚Ä¢ Most commands have shortcuts (shown in parentheses)',
      '‚Ä¢ Press Alt+Enter to toggle fullscreen mode',
      '‚Ä¢ Press Ctrl+L to clear the terminal',
      '',
      'For detailed help on any command, type: /help <command>',
      'For example: /help pace'
    ].join('\n');
  }
};